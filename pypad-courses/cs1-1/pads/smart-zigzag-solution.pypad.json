{
    "title": "[Answer] Smart Zigzag",
    "content": "from cs1robots import *\n\n# Your code must work for empty worlds of all possible sizes.\n\ncreate_world(avenues=10, streets=10)\n# create_world(avenues=11, streets=8)\n# create_world(avenues=6, streets=9)\n# create_world(avenues=1, streets=3)\n# create_world(avenues=2, streets=1)\n# create_world(avenues=1, streets=2)\n# ...\n\nbot = Robot()\nbot.set_trace('blue')\nbot.set_pause(0.3)\n\ndef turn_right():\n    for i in range(3):\n        bot.turn_left()\n        \ndef move_to_wall():\n    while bot.front_is_clear():\n        bot.move()\n        \ndef round_trip():\n    move_to_wall()\n    turn_right()\n    if bot.front_is_clear():\n        bot.move()\n        turn_right()\n        move_to_wall()\n        bot.turn_left()\n        if bot.front_is_clear():\n            bot.move()\n            bot.turn_left()\n\nif bot.left_is_clear():\n    bot.turn_left()\n    while bot.front_is_clear():\n        round_trip()\nelse:\n    move_to_wall()\n",
    "files": {
        ".grader.py": {
            "type": "text",
            "body": "import re\nfrom gradepad import StdoutCollector, Grader\nimport cs1robots\n\nposition_log_10_10 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 9], [1, 8], [1, 7], [1, 6], [1, 5], [1, 4], [1, 3], [1, 2], [1, 1], [1, 0], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 9], [3, 8], [3, 7], [3, 6], [3, 5], [3, 4], [3, 3], [3, 2], [3, 1], [3, 0], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 9], [5, 8], [5, 7], [5, 6], [5, 5], [5, 4], [5, 3], [5, 2], [5, 1], [5, 0], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 9], [7, 8], [7, 7], [7, 6], [7, 5], [7, 4], [7, 3], [7, 2], [7, 1], [7, 0], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 9], [9, 8], [9, 7], [9, 6], [9, 5], [9, 4], [9, 3], [9, 2], [9, 1], [9, 0]]\nposition_log_5_8 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 7], [1, 6], [1, 5], [1, 4], [1, 3], [1, 2], [1, 1], [1, 0], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [3, 7], [3, 6], [3, 5], [3, 4], [3, 3], [3, 2], [3, 1], [3, 0], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7]]\nposition_log_4_5 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 4], [1, 3], [1, 2], [1, 1], [1, 0], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 4], [3, 3], [3, 2], [3, 1], [3, 0]]\nposition_log_8_2 = [[0, 0], [0, 1], [1, 1], [1, 0], [2, 0], [2, 1], [3, 1], [3, 0], [4, 0], [4, 1], [5, 1], [5, 0], [6, 0], [6, 1], [7, 1], [7, 0]]\nposition_log_8_1 = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0]]\nposition_log_1_5 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4]]\n\ndef grade(grader):\n    test1 = grader.test('A robot exists.', 'Please make one robot. No more, no less. Try \"bot = Robot()\"?')\n    test2 = grader.test('Robot moved in a zigzag pattern in a 10×10 world.', 'Please move the robot in a zigzag pattern exactly like in examples. Move northward first unless the world\\'s height is 1. Visit all spots in the world and do not visit one place more than once.')\n    test3 = grader.test('Robot moved in a zigzag pattern in a 5×8 world.', 'Please move the robot in a zigzag pattern exactly like in examples. Move northward first unless the world\\'s height is 1. Visit all spots in the world and do not visit one place more than once.')\n    test4 = grader.test('Robot moved in a zigzag pattern in a 4×5 world.', 'Please move the robot in a zigzag pattern exactly like in examples. Move northward first unless the world\\'s height is 1. Visit all spots in the world and do not visit one place more than once.')\n    test5 = grader.test('Robot moved in a zigzag pattern in a 8×2 world.', 'Please move the robot in a zigzag pattern exactly like in examples. Move northward first unless the world\\'s height is 1. Visit all spots in the world and do not visit one place more than once.')\n    test6 = grader.test('Robot moved in a zigzag pattern in a 8×1 world.', 'Please move the robot in a zigzag pattern exactly like in examples. Move northward first unless the world\\'s height is 1. Visit all spots in the world and do not visit one place more than once.')\n    test7 = grader.test('Robot moved in a zigzag pattern in a 1×5 world.', 'Please move the robot in a zigzag pattern exactly like in examples. Move eastward until your robot meets the wall when world\\'s height is 1.')\n    \n    cs1robots.helper.create_world(avenues=10, streets=10)\n    cs1robots.helper.lock_world()\n    collector = StdoutCollector()\n    with collector:\n        import main\n    \n    robots = cs1robots.helper.get_all_robots()\n    test1.expect(len(robots) == 1)\n    test2.expect(robots[0].position_log == position_log_10_10)\n    \n    cs1robots.helper.unlock_world()\n    cs1robots.helper.create_world(avenues=5, streets=8)\n    cs1robots.helper.lock_world()\n    with collector:\n        with open('main.py', 'r') as f:\n            exec(f.read())\n            \n    robots = cs1robots.helper.get_all_robots()\n    test3.expect(robots[0].position_log == position_log_5_8)\n    \n    cs1robots.helper.unlock_world()\n    cs1robots.helper.create_world(avenues=4, streets=5)\n    cs1robots.helper.lock_world()\n    with collector:\n        with open('main.py', 'r') as f:\n            exec(f.read())\n            \n    robots = cs1robots.helper.get_all_robots()\n    test4.expect(robots[0].position_log == position_log_4_5)\n    \n    cs1robots.helper.unlock_world()\n    cs1robots.helper.create_world(avenues=8, streets=2)\n    cs1robots.helper.lock_world()\n    with collector:\n        with open('main.py', 'r') as f:\n            exec(f.read())\n            \n    robots = cs1robots.helper.get_all_robots()\n    test5.expect(robots[0].position_log == position_log_8_2)\n    \n    cs1robots.helper.unlock_world()\n    cs1robots.helper.create_world(avenues=8, streets=1)\n    cs1robots.helper.lock_world()\n    with collector:\n        with open('main.py', 'r') as f:\n            exec(f.read())\n            \n    robots = cs1robots.helper.get_all_robots()\n    test6.expect(robots[0].position_log == position_log_8_1)\n    \n    cs1robots.helper.unlock_world()\n    cs1robots.helper.create_world(avenues=1, streets=5)\n    cs1robots.helper.lock_world()\n    with collector:\n        with open('main.py', 'r') as f:\n            exec(f.read())\n            \n    robots = cs1robots.helper.get_all_robots()\n    test7.expect(robots[0].position_log == position_log_1_5)\n    \ngrader = Grader(locale='en')\ngrader.run(grade)"
        },
        ".passed.json": {
            "type": "text",
            "body": ""
        }
    }
}